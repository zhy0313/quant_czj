{
    "contents" : "rm(list=ls())\nlibrary(plyr)\nlibrary(bnlearn)\nlibrary(Rgraphviz)\nlibrary(gRain)\n\nxauusd.all<-read.csv(\"F:/datasets/XAUUSD1.csv\",header = FALSE)\nxauusd.all<-read.csv(\"F:/datasets/stock_600000.csv\",header = FALSE)\nnames(xauusd.all)<-c(\"Date\",\"Hours\",\"Open\",\"High\",\"Low\",\"Close\",\"Volumes\")\nxauusd<-xauusd.all\n\n# 计算新指标：移动均线指标MA，相邻指标NE\nbuild_new_index<-function(x){\n  x$CO<-(x$Close-x$Open)/(x$Close+x$Open)*2\n  temp.CloseMinusOpen<-abs(x$Close-x$Open)\n  temp.CloseMinusOpen[temp.CloseMinusOpen<0.001]<-0.001\n  x$UStoCO<-(x$High-apply(X = matrix(c(x$Open,x$Close),ncol=2),MARGIN = 1,max))/temp.CloseMinusOpen\n  x$DStoCO<-(apply(X = matrix(c(x$Open,x$Close),ncol=2),MARGIN = 1,min)-x$Low)/temp.CloseMinusOpen\n  x$NE<-(c(NA,x$Close[-1])-x$Open)/(c(NA,x$Close[-1])+x$Open)*2\n  x$MA5<-c(rep(NA,5),diff(cumsum(x$Close),5)/5)\n  x$MA10<-c(rep(NA,10),diff(cumsum(x$Close),10)/10)\n  x$MA30<-c(rep(NA,30),diff(cumsum(x$Close),30)/30)\n  x$MA90<-c(rep(NA,90),diff(cumsum(x$Close),90)/90)\n  x$MA180<-c(rep(NA,180),diff(cumsum(x$Close),180)/180)\n  x$corner<-c(NA,diff(x$MA5)-diff(x$MA10))\n  x$location<-x$Close-x$MA5\n  return(x)\n}\n# 离散化指标\ndiscrete_index<-function(x){\n  y<-data.frame(CO=x$CO,UStoCO=x$UStoCO,DStoCO=x$DStoCO,NE=x$NE,corner=x$corner,location=x$location)\n#     y$CO[x$CO<=-0.03]=\"Bad1\"\n#     y$CO[x$CO>-0.03&x$CO<=-0.00001]=\"Bad2\"\n#     y$CO[x$CO>-0.00001&x$CO<=0.00001]=\"General\"\n#     y$CO[x$CO>0.00001&x$CO<=0.03]=\"Good1\"\n#     y$CO[x$CO>0.03]=\"Good2\"\n  \n  y$CO[x$CO<=0]=\"Bad\"\n  y$CO[x$CO>0]=\"Good\"\n  \n  y$UStoCO[x$UStoCO<=0.5]=\"Short\"\n  y$UStoCO[x$UStoCO>0.5&x$UStoCO<=1]=\"General\"\n  y$UStoCO[x$UStoCO>0.5]=\"Long\"\n  \n  y$DStoCO[x$DStoCO<=0.5]=\"Short\"\n  y$DStoCO[x$DStoCO>0.5&x$UStoCO<=1]=\"General\"\n  y$DStoCO[x$DStoCO>0.5]=\"Long\"\n  \n  y$NE[x$NE>0.01]=\"Better\"\n  y$NE[x$NE<=-0.01]=\"Worse\"\n  y$NE[x$NE>-0.01&x$NE<=0.01]=\"General\"\n  \n  y$corner[x$corner>0]=\"Yes\"\n  y$corner[x$corner<=0]=\"No\"\n  \n  y$location[x$location>0]=\"High\"\n  y$location[x$location<=0]=\"Low\"\n  return(y)\n}\n\nxauusd.addindex<-build_new_index(xauusd)\n# xauusd.discrete<-as.data.frame(apply(X = discrete_index(xauusd.addindex),MARGIN = 2,function(i) factor(i)))\nxauusd.discrete<-discrete_index(xauusd.addindex)\n\n# 构造时间序列\nfun.getseries.vectors<-function(vects,first,num.backpoints){#多个vect向量截取first到len=len(vect)-num.backpoints\n  return(vects[first:(dim(vects)[1]-num.backpoints+first-1),])\n}\nbackpoints<-2\ndata.series<-as.data.frame(t(ldply(.data = sapply(backpoints:1,function(i) fun.getseries.vectors(xauusd.discrete,i,backpoints)))))\ncolnames(data.series)<-paste(names(xauusd.discrete),rep(1:backpoints,each=length(names(xauusd.discrete))),sep=\"_\")\nrownames(data.series)<-c()\ndata.series$PreState<-as.factor(c(as.character(data.series[2:dim(data.series)[1],1]),NA))\ndata.series.complete<-data.series[complete.cases(data.series),]\n\n# 构造训练集和测试集\nloc.train<-sample(x=dim(data.series.complete)[1],size  =  1/3*dim(data.series.complete)[1])\ntrain.set<-data.series.complete[loc.train,]\ntest.set<-data.series.complete[-loc.train,]\n\n# 贝叶斯网络分类器\n{\ntemp.paircode<-expand.grid(1:backpoints,1:backpoints)\npair.code<-temp.paircode[temp.paircode[,1]<temp.paircode[,2],]\npair.index<-expand.grid(names(xauusd.discrete),names(xauusd.discrete))\nfather.node<-as.vector(sapply(X = pair.index[,1],FUN = function(i) paste(i,pair.code[,1],sep=\"_\")))\nchildren.node<-as.vector(sapply(X = pair.index[,2],FUN = function(i) paste(i,pair.code[,2],sep=\"_\")))\nfather.node2<-rep(\"PreState\",length(names(xauusd.discrete))*backpoints)\nchildren.node2<-as.vector(sapply(X = 1:backpoints,FUN = function(i) paste(names(xauusd.discrete),i,sep = \"_\")))\n\nblack.list<-data.frame(from=c(as.vector(father.node),father.node2),to=c(as.vector(children.node),children.node2))\n\nbn.structure<-hc(train.set,blacklist  =  black.list)#结构训练\ngraphviz.plot(bn.structure,  layout  =  \"fdp\")\nbn.parameter<-bn.fit(x  =  bn.structure,data  =  train.set)#参数学习\n\nv.nodes<-as.vector(sapply(X = names(xauusd.discrete),FUN = function(i) paste(i,1:backpoints,sep = \"_\")))\ntrainset.jtree<-compile(as.grain(bn.parameter))\nfun.bninference<-function(trainset.jtree,evidence.nodes,nodes.states,nodes.pre){\n  pre.evidence<-setFinding(trainset.jtree,nodes=evidence.nodes,states = nodes.states)\n  querygrain(pre.evidence,nodes=nodes.pre,type=\"marginal\")\n  \n}\ngc()\npre.p<-as.data.frame(matrix(unlist(apply(test.set[,-dim(test.set)[2]],MARGIN = 1,function(i) fun.bninference(trainset.jtree,v.nodes,i,\"PreState\"))),\n                            ncol = 2,byrow = TRUE))\nloc.p<-apply(pre.p==apply(X = pre.p,MARGIN = 1,FUN = max),MARGIN = 1,FUN = which)\npre.result<-factor(x = loc.p,labels = c(\"Bad\",\"Good\"),levels = c(1,2))\nprecies.df<-data.frame(real=test.set$PreState,pre=pre.result)\nprecise.table<-table(precies.df)\nprecise.table\nsum(diag(precise.table))/sum(precise.table)\n}\n\n# 决策树(回归树)\n\n{\nlibrary(rpart)\nlibrary(rpart.plot)\nchoose_index<-function(x){\n  y<-data.frame(CO=x$CO,UStoCO=x$UStoCO,DStoCO=x$DStoCO,NE=x$NE,corner=x$corner,location=x$location,volume=x$Volumes)\n  return(y)\n}\nxauusd.choose<-choose_index(xauusd.addindex)\nbackpoints<-8\ndata.series<-as.data.frame(t(ldply(.data = sapply(backpoints:1,function(i) fun.getseries.vectors(xauusd.choose,i,backpoints)))))\ncolnames(data.series)<-paste(names(xauusd.choose),rep(1:backpoints,each=length(names(xauusd.choose))),sep=\"_\")\nrownames(data.series)<-c()\ndata.series$PreState<-c(data.series[2:dim(data.series)[1],1],NA)\ndata.series.complete<-as.data.frame(scale(data.series[complete.cases(data.series),]))\n\n\nloc.train<-sample(x=dim(data.series.complete)[1],size  =  1/2*dim(data.series.complete)[1])\ntrain.set<-data.series.complete[loc.train,]\ntest.set<-data.series.complete[-loc.train,]\n\nct<-rpart.control(xval=10,minslit=50,cp=0.0077)\ntfit<-rpart(formula = PreState~.,data = train.set,control = ct,method = \"anova\",parms = list(split=\"gini\"))\n# summary(tfit)\n# par(mfrow=c(1,3))\n# plot(tfit)\n# text(tfit,use.n=T,all=T,cex=0.9)\n# rpart.plot(tfit,branch=1,branch.type=2,type=1,extra=100,shadow.col=\"gray\",box.col=\"green\",border.col=\"blue\",split.col=\"red\",split.cex=1.2,main=\"Decision Tree\")\nrpart.plot(tfit,type=2,faclen=T) \n\npre.value<-predict(tfit,test.set[,-dim(test.set)[2]])\nreal.value<-test.set[,dim(test.set)[2]]\nddd<-data.frame(pre=pre.value,real=real.value)\n# plot(real.value,pre.value)\ncor(ddd)\n\nsst<-sum((real.value-mean(real.value))^2)\nssr<-sum((pre.value-mean(real.value))^2)\nsse<-sum((pre.value-real.value)^2)\nsst\nssr\nsse\nplot(pre.value-real.value)\n}\n",
    "created" : 1474272193772.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "12|29|27|0|\n29|28|58|0|\n98|80|102|0|\n116|1|158|0|\n",
    "hash" : "1162702027",
    "id" : "DAEA0E67",
    "lastKnownWriteTime" : 1474277567,
    "path" : "~/quant_czj/KLineModeling.R",
    "project_path" : "KLineModeling.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}